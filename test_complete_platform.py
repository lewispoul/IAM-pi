#!/usr/bin/env python3
"""
Script de test complet pour IAM Plateforme Autonome v2.0
Teste l'interface web, les API REST et les fonctionnalit√©s IA
"""

import requests
import json
import time
import os

# Configuration
BASE_URL = "http://localhost:5002"
TEST_MODULE = "test_auto_demo"

def test_platform_health():
    """Test de sant√© de la plateforme"""
    print("üîç Test de connectivit√© plateforme...")
    try:
        response = requests.get(f"{BASE_URL}/", timeout=10)
        if response.status_code == 200 and "IAM" in response.text:
            print("‚úÖ Plateforme accessible et fonctionnelle")
            return True
        else:
            print(f"‚ùå R√©ponse inattendue: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_module_api():
    """Test de l'API de g√©n√©ration de modules"""
    print("ü§ñ Test API g√©n√©ration de module...")
    
    data = {
        "module_name": TEST_MODULE,
        "description": "Module de test automatique avec fonction simple",
        "requirements": "Une fonction qui retourne 'Hello World'"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/generate_module", json=data, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("‚úÖ Module g√©n√©r√© via API")
            return True
        else:
            print(f"‚ùå Erreur API: {result.get('error', 'Inconnue')}")
            return False
            
    except requests.Timeout:
        print("‚è∞ Timeout - G√©n√©ration trop longue")
        return False
    except Exception as e:
        print(f"‚ùå Erreur requ√™te: {e}")
        return False

def test_files_creation():
    """Test de cr√©ation des fichiers"""
    print("üìÅ V√©rification des fichiers cr√©√©s...")
    
    module_path = f"GeneratedScripts/{TEST_MODULE}.py"
    
    if os.path.exists(module_path):
        print(f"‚úÖ Fichier module cr√©√©: {module_path}")
        
        # V√©rifier le contenu
        with open(module_path, 'r') as f:
            content = f.read()
            if "def " in content or "class " in content:
                print("‚úÖ Contenu du module valide")
                return True
            else:
                print("‚ùå Contenu du module invalide")
                return False
    else:
        print(f"‚ùå Fichier module non trouv√©: {module_path}")
        return False

def test_chat_basic():
    """Test basique du chat"""
    print("üí¨ Test fonctionnalit√© chat...")
    
    data = {
        "message": "Dis juste 'Bonjour' s'il te pla√Æt",
        "history": []
    }
    
    try:
        response = requests.post(f"{BASE_URL}/chat", json=data, timeout=20)
        result = response.json()
        
        if result.get('success'):
            response_text = result.get('data', {}).get('response', '')
            print(f"‚úÖ Chat fonctionne - R√©ponse: {response_text[:50]}...")
            return True
        else:
            error = result.get('error', 'Inconnue')
            if "API non configur√©e" in error:
                print("‚ö†Ô∏è  Chat indisponible (API OpenAI non configur√©e)")
                return True  # Consid√©r√© comme normal
            else:
                print(f"‚ùå Erreur chat: {error}")
                return False
                
    except Exception as e:
        print(f"‚ùå Erreur chat: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("=" * 60)
    print("üß™ TEST COMPLET - IAM Plateforme Autonome v2.0")
    print("=" * 60)
    print(f"üéØ URL test√©e: {BASE_URL}")
    print()
    
    results = []
    test_names = []
    
    # Test 1: Sant√© plateforme
    test_names.append("Connectivit√© plateforme")
    results.append(test_platform_health())
    print()
    
    # Test 2: API modules
    test_names.append("API g√©n√©ration module")
    results.append(test_module_api())
    time.sleep(3)
    print()
    
    # Test 3: Fichiers cr√©√©s
    test_names.append("Cr√©ation de fichiers")
    results.append(test_files_creation())
    print()
    
    # Test 4: Chat basique
    test_names.append("Fonctionnalit√© chat")
    results.append(test_chat_basic())
    print()
    
    # Affichage des r√©sultats
    print("=" * 60)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 60)
    
    passed = 0
    for i, (name, result) in enumerate(zip(test_names, results)):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{i+1:2d}. {name:<30} {status}")
        if result:
            passed += 1
    
    print()
    success_rate = (passed / len(results)) * 100
    print(f"üéØ Taux de r√©ussite: {passed}/{len(results)} ({success_rate:.1f}%)")
    
    if success_rate == 100:
        print("üéâ EXCELLENT ! Tous les tests sont pass√©s.")
    elif success_rate >= 75:
        print("‚úÖ BIEN ! La plupart des fonctionnalit√©s marchent.")
    elif success_rate >= 50:
        print("‚ö†Ô∏è  MOYEN. Quelques probl√®mes d√©tect√©s.")
    else:
        print("‚ùå PROBL√àME. Plusieurs fonctionnalit√©s ne marchent pas.")
    
    print()
    print("üìã Actions sugg√©r√©es:")
    if success_rate < 100:
        print("   ‚Ä¢ V√©rifier que la plateforme tourne: ps aux | grep IAM_AutonomousAgent_v2")
        print("   ‚Ä¢ Consulter les logs: tail -f platform_v2.log")
        print("   ‚Ä¢ Configurer OpenAI: export OPENAI_API_KEY='sk-...'")
    print(f"   ‚Ä¢ Interface web: {BASE_URL}")
    print("   ‚Ä¢ Modules g√©n√©r√©s: ls -la GeneratedScripts/")
    
    return success_rate >= 75

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
