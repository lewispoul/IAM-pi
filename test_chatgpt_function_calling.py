#!/usr/bin/env python3
"""
Test du Function Calling pour IAM_ChatGPT_Integration.py
Ce script teste si l'agent peut r√©ellement acc√©der aux fichiers et ex√©cuter du code.
"""

import os
import yaml
from IAM_ChatGPT_Integration import IAMChatGPTAgent


def test_function_calling():
    """Test complet du Function Calling"""
    
    print("üß™ Test du Function Calling IAM ChatGPT Agent")
    print("=" * 50)
    
    # Charger la configuration
    try:
        with open("agent_config.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)
        api_key = config["gpt4_api_key"]
    except FileNotFoundError:
        print("‚ùå Fichier agent_config.yaml non trouv√©")
        print("üí° Cr√©ez ce fichier avec votre cl√© API OpenAI:")
        print("gpt4_api_key: 'votre_cle_api_ici'")
        return
    except KeyError:
        print("‚ùå Cl√© 'gpt4_api_key' non trouv√©e dans agent_config.yaml")
        return
    
    # Cr√©er l'agent
    agent = IAMChatGPTAgent(api_key=api_key)
    agent.enable_god_mode()
    
    print("\nüî• Agent cr√©√© avec MODE GOD activ√©")
    
    # Tests s√©quentiels
    tests = [
        {
            "name": "Test 1: Lecture d'un fichier existant",
            "message": "Peux-tu lire le fichier README.md et me dire ce qu'il contient?",
            "expected": "devrait lire le contenu du fichier README.md"
        },
        {
            "name": "Test 2: Liste des fichiers du r√©pertoire",
            "message": "Liste-moi tous les fichiers Python (.py) dans le r√©pertoire courant",
            "expected": "devrait lister les fichiers .py"
        },
        {
            "name": "Test 3: Ex√©cution de code Python simple",
            "message": "Ex√©cute ce code Python: print('Hello from IAM Agent!'); import os; print(f'R√©pertoire courant: {os.getcwd()}')",
            "expected": "devrait ex√©cuter le code et afficher le r√©sultat"
        },
        {
            "name": "Test 4: Cr√©ation d'un fichier de test",
            "message": "Cr√©e un fichier test_function_calling.txt avec le contenu 'Test r√©ussi! Function Calling fonctionne.'",
            "expected": "devrait cr√©er le fichier avec le contenu sp√©cifi√©"
        }
    ]
    
    conversation = None
    
    for i, test in enumerate(tests, 1):
        print(f"\n{'='*20} {test['name']} {'='*20}")
        print(f"üìù Message: {test['message']}")
        print(f"üéØ Attendu: {test['expected']}")
        print("-" * 60)
        
        try:
            response, conversation = agent.chat(test['message'], conversation)
            print(f"ü§ñ R√©ponse: {response}")
            
            # V√©rification sp√©ciale pour le test 4
            if i == 4:
                if os.path.exists("test_function_calling.txt"):
                    with open("test_function_calling.txt", "r") as f:
                        content = f.read()
                    print(f"‚úÖ Fichier cr√©√© avec succ√®s! Contenu: {content}")
                else:
                    print("‚ùå Fichier non cr√©√©")
            
        except Exception as e:
            print(f"‚ùå Erreur dans le test {i}: {e}")
        
        print("-" * 60)
        input("Appuyez sur Entr√©e pour continuer...")
    
    print("\nüéâ Tests termin√©s!")
    print("Si vous voyez du contenu de fichiers et des r√©sultats d'ex√©cution,")
    print("alors le Function Calling fonctionne correctement!")


def test_direct_functions():
    """Test direct des fonctions sans API OpenAI"""
    print("\nüîß Test direct des fonctions (sans OpenAI)")
    print("=" * 50)
    
    from IAM_FileManager import IAMFileManager
    from IAM_CodeExecutor import IAMCodeExecutor
    
    file_manager = IAMFileManager()
    file_manager.enable_god_mode()
    
    code_executor = IAMCodeExecutor()
    
    # Test lecture de fichier
    print("\nüìñ Test lecture README.md:")
    result = file_manager.read_file("README.md")
    if "error" in result:
        print(f"‚ùå Erreur: {result['error']}")
    else:
        print(f"‚úÖ Succ√®s: {len(result.get('content', ''))} caract√®res lus")
    
    # Test liste de fichiers
    print("\nüìÅ Test liste des fichiers:")
    result = file_manager.list_directory("")
    if "error" in result:
        print(f"‚ùå Erreur: {result['error']}")
    else:
        files = result.get('files', [])
        py_files = [f for f in files if f.endswith('.py')]
        print(f"‚úÖ Succ√®s: {len(py_files)} fichiers Python trouv√©s")
    
    # Test ex√©cution de code
    print("\nüêç Test ex√©cution Python:")
    result = code_executor.execute_python_code("print('Test direct r√©ussi!')")
    if "error" in result:
        print(f"‚ùå Erreur: {result['error']}")
    else:
        print(f"‚úÖ Succ√®s: {result.get('output', 'Pas de sortie')}")


if __name__ == "__main__":
    print("Choisissez le type de test:")
    print("1. Test complet avec Function Calling (n√©cessite API OpenAI)")
    print("2. Test direct des fonctions (sans API)")
    
    choice = input("Votre choix (1 ou 2): ").strip()
    
    if choice == "1":
        test_function_calling()
    elif choice == "2":
        test_direct_functions()
    else:
        print("Choix invalide. Ex√©cution du test direct...")
        test_direct_functions()
